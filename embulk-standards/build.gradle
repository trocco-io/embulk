// TODO: Have more details in description and summary.
description = 'Embulk standard plugins'
ext {
    summary = 'Embulk standard plugins'
}

// include ruby scripts to jar. don't use sourceSets.main.resources.srcDirs
// because IntelliJ causes error if srcDirs includes files out of projectDir.
processResources.from("${buildDir}/embulk_gem_complements")

repositories {
    mavenCentral()
}

configurations {
    rubyTestRuntime
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

dependencies {
    compileOnly project(":embulk-api")
    compileOnly project(":embulk-spi")
    compileOnly project(":embulk-core")

    compile project(":embulk-decoder-bzip2")
    compile project(":embulk-decoder-gzip")
    compile project(":embulk-encoder-bzip2")
    compile project(":embulk-encoder-gzip")
    compile project(":embulk-guess-bzip2")
    compile project(":embulk-guess-csv")
    compile project(":embulk-guess-gzip")
    compile project(":embulk-guess-json")
    compile project(":embulk-filter-remove_columns")
    compile project(":embulk-filter-rename")
    compile project(":embulk-formatter-csv")
    compile project(":embulk-input-config")
    compile project(":embulk-input-file")
    compile project(":embulk-output-file")
    compile project(":embulk-output-null")
    compile project(":embulk-output-stdout")
    compile project(":embulk-parser-csv")
    compile project(":embulk-parser-json")

    testImplementation "junit:junit:4.12"
    testImplementation "org.hamcrest:hamcrest-library:1.3"
    testImplementation project(":embulk-api")
    testImplementation project(":embulk-spi")
    testImplementation project(":embulk-core")
    testImplementation project(":embulk-core").sourceSets.test.output
    testImplementation project(":embulk-junit4")
    testImplementation "ch.qos.logback:logback-classic:1.1.3"

    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.6.7"
    testImplementation "com.google.guava:guava:18.0"
    testImplementation "joda-time:joda-time:2.9.2"
    testImplementation "org.msgpack:msgpack-core:0.8.11"

    // TODO: Remove this, and load it with the proper DependencyClassLoader.
    // This statement gets it loaded by the top-level ClassLoader.
    testImplementation project(":embulk-deps")

    testImplementation "org.jruby:jruby-complete:9.1.15.0"

    rubyTestRuntime project(":embulk-api")
    rubyTestRuntime project(":embulk-spi")
    rubyTestRuntime project(":embulk-core")
    rubyTestRuntime "org.jruby:jruby-complete:9.1.15.0"
}

test.dependsOn(":installGemsForTesting")
test {
    environment "GEM_HOME", "${rootProject.buildDir}/gems_for_testing"
}

task rubyTestVanilla(type: JavaExec, dependsOn: [
        "jar",
        "prepareDependencyJars",
        ":embulk-deps:prepareDependencyJars",
        ":installGemsForTesting",
        ]) {
    workingDir = file("${project.projectDir}");
    classpath = configurations.rubyTestRuntime
    main = "org.jruby.Main"
    args = ["-Isrc/main/ruby", "-Isrc/test/ruby", "--debug", "./src/test/ruby/vanilla/run-test.rb"]
    environment "GEM_HOME": "${rootProject.buildDir}/gems_for_testing"
}
test.dependsOn(['rubyTestVanilla'])

String buildRubyStyleVersionFromJavaStyleVersion(String javaStyleVersion) {
    if (javaStyleVersion.contains('-')) {
        List<String> versionTokens = javaStyleVersion.tokenize('-');
        if (versionTokens.size() != 2) {
            throw new GradleException('Invalid project version: ' + javaStyleVersion);
        }
        return versionTokens.get(0) + '.' + versionTokens.get(1).toLowerCase();
    }
    else {
        return javaStyleVersion;
    }
}

task prepareDependencyJars(type: Copy) {
    doFirst {
        delete file("${buildDir}/dependency_jars")
        mkdir file("${buildDir}/dependency_jars")
    }
    into "${buildDir}/dependency_jars"
    from configurations.runtimeClasspath
}

task complementEmbulkGem {
    doFirst {
        delete("${buildDir}/embulk_gem_complements")
    }
    doLast {
        def rubyVersion = buildRubyStyleVersionFromJavaStyleVersion("${project.version}")
        file("${buildDir}/embulk_gem_complements/gems/embulk-${rubyVersion}-java/lib").mkdirs()
        copy {
            from "${projectDir}/src/main/ruby"
            into "${buildDir}/embulk_gem_complements/gems/embulk-${rubyVersion}-java/lib"
        }
    }
}
processResources.dependsOn("complementEmbulkGem")
